// <auto-generated />
using System;
using BlotzTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlotzTask.Migrations
{
    [DbContext(typeof(BlotzTaskDbContext))]
    [Migration("20240808221248_GetTasksByID")]
    partial class GetTasksByID
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlotzTask.Data.Entities.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaskItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 8, 22, 12, 47, 743, DateTimeKind.Utc).AddTicks(8139),
                            Description = "Description for task 1",
                            IsDone = false,
                            Title = "Initial Task 1",
                            UpdatedAt = new DateTime(2024, 8, 8, 22, 12, 47, 743, DateTimeKind.Utc).AddTicks(8141)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 8, 22, 12, 47, 743, DateTimeKind.Utc).AddTicks(8180),
                            Description = "Description for task 2",
                            IsDone = false,
                            Title = "Initial Task 2",
                            UpdatedAt = new DateTime(2024, 8, 8, 22, 12, 47, 743, DateTimeKind.Utc).AddTicks(8181)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 8, 8, 22, 12, 47, 743, DateTimeKind.Utc).AddTicks(8182),
                            Description = "Description for task 3",
                            IsDone = false,
                            Title = "Initial Task 3",
                            UpdatedAt = new DateTime(2024, 8, 8, 22, 12, 47, 743, DateTimeKind.Utc).AddTicks(8182)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
